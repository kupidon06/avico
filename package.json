{
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "cssnano": "^7.0.6",
    "fast-glob": "^3.3.3",
    "html-minifier-terser": "^7.2.0",
    "postcss": "^8.4.49",
    "postcss-cli": "^11.0.0",
    "tailwindcss": "^3.4.17",
    "terser": "^5.37.0"
  },
  "scripts": {
    "build:tailwind": "npx tailwindcss -i ./static/css/styles.css -o ./dist/css/tailwind.css --minify",
    "minify:js": "node -e \"require('fast-glob').sync('./static/**/*.js').forEach(f => require('child_process').execSync(`npx terser -c -m -o ./dist/${f.replace(/^\\.?\\/static\\//, '')}.min ${f}`, { stdio: 'inherit' }))\"",
    "minify:html": "node -e \"const fg = require('fast-glob'); const cp = require('child_process'); const fs = require('fs'); const path = require('path'); fg.sync('./templates/**/*.html').forEach(f => { const outFile = `./htmldist/${f.replace(/^(\\.\\/)?templates\\//, '')}`; fs.mkdirSync(path.dirname(outFile), { recursive: true }); try { cp.execSync(`npx html-minifier-terser --config-file html-minifier.config.js -o ${outFile} ${f}`, { stdio: 'inherit' }); } catch (err) { console.error(`Error minifying ${f}:`, err); } });\""
,

    "minify:css": "node -e \"require('fast-glob').sync('./static/**/*.css').forEach(f => require('child_process').execSync(`npx postcss ${f} --use cssnano -o ./dist/${f.replace(/^\\.?\\/static\\//, '')}.min`, { stdio: 'inherit' }))\"",
    "minify:all": "npm run build:tailwind && npm run minify:js && npm run minify:html && npm run minify:css"
  }
}
